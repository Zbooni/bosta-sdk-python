# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file
"""
This namespace contains the endpoints and data types for working with deliveries.
"""

try:
    from . import stone_validators as bv
    from . import stone_base as bb
except (ImportError, SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import stone_validators as bv
    import stone_base as bb

class Address(object):
    """
    An address where a delivery can be picked up or dropped off.

    :ivar geoLocation: Latitude and Longitude.
    :ivar firstLine: Human readable text address.
    :ivar secondLine: Address notes.
    :ivar floor: Floor number.
    :ivar apartment: Apartment number.
    :ivar zone: Zone where the address is located.
    :ivar district: District where the address is located.
    :ivar city: City code where the address belongs to.
    """

    __slots__ = [
        '_geoLocation_value',
        '_geoLocation_present',
        '_firstLine_value',
        '_firstLine_present',
        '_secondLine_value',
        '_secondLine_present',
        '_floor_value',
        '_floor_present',
        '_apartment_value',
        '_apartment_present',
        '_zone_value',
        '_zone_present',
        '_district_value',
        '_district_present',
        '_city_value',
        '_city_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 firstLine=None,
                 city=None,
                 geoLocation=None,
                 secondLine=None,
                 floor=None,
                 apartment=None,
                 zone=None,
                 district=None):
        self._geoLocation_value = None
        self._geoLocation_present = False
        self._firstLine_value = None
        self._firstLine_present = False
        self._secondLine_value = None
        self._secondLine_present = False
        self._floor_value = None
        self._floor_present = False
        self._apartment_value = None
        self._apartment_present = False
        self._zone_value = None
        self._zone_present = False
        self._district_value = None
        self._district_present = False
        self._city_value = None
        self._city_present = False
        if geoLocation is not None:
            self.geoLocation = geoLocation
        if firstLine is not None:
            self.firstLine = firstLine
        if secondLine is not None:
            self.secondLine = secondLine
        if floor is not None:
            self.floor = floor
        if apartment is not None:
            self.apartment = apartment
        if zone is not None:
            self.zone = zone
        if district is not None:
            self.district = district
        if city is not None:
            self.city = city

    @property
    def geoLocation(self):
        """
        Latitude and Longitude.

        :rtype: list of [float]
        """
        if self._geoLocation_present:
            return self._geoLocation_value
        else:
            return None

    @geoLocation.setter
    def geoLocation(self, val):
        if val is None:
            del self.geoLocation
            return
        val = self._geoLocation_validator.validate(val)
        self._geoLocation_value = val
        self._geoLocation_present = True

    @geoLocation.deleter
    def geoLocation(self):
        self._geoLocation_value = None
        self._geoLocation_present = False

    @property
    def firstLine(self):
        """
        Human readable text address.

        :rtype: str
        """
        if self._firstLine_present:
            return self._firstLine_value
        else:
            raise AttributeError("missing required field 'firstLine'")

    @firstLine.setter
    def firstLine(self, val):
        val = self._firstLine_validator.validate(val)
        self._firstLine_value = val
        self._firstLine_present = True

    @firstLine.deleter
    def firstLine(self):
        self._firstLine_value = None
        self._firstLine_present = False

    @property
    def secondLine(self):
        """
        Address notes.

        :rtype: str
        """
        if self._secondLine_present:
            return self._secondLine_value
        else:
            return None

    @secondLine.setter
    def secondLine(self, val):
        if val is None:
            del self.secondLine
            return
        val = self._secondLine_validator.validate(val)
        self._secondLine_value = val
        self._secondLine_present = True

    @secondLine.deleter
    def secondLine(self):
        self._secondLine_value = None
        self._secondLine_present = False

    @property
    def floor(self):
        """
        Floor number.

        :rtype: long
        """
        if self._floor_present:
            return self._floor_value
        else:
            return None

    @floor.setter
    def floor(self, val):
        if val is None:
            del self.floor
            return
        val = self._floor_validator.validate(val)
        self._floor_value = val
        self._floor_present = True

    @floor.deleter
    def floor(self):
        self._floor_value = None
        self._floor_present = False

    @property
    def apartment(self):
        """
        Apartment number.

        :rtype: long
        """
        if self._apartment_present:
            return self._apartment_value
        else:
            return None

    @apartment.setter
    def apartment(self, val):
        if val is None:
            del self.apartment
            return
        val = self._apartment_validator.validate(val)
        self._apartment_value = val
        self._apartment_present = True

    @apartment.deleter
    def apartment(self):
        self._apartment_value = None
        self._apartment_present = False

    @property
    def zone(self):
        """
        Zone where the address is located.

        :rtype: str
        """
        if self._zone_present:
            return self._zone_value
        else:
            return None

    @zone.setter
    def zone(self, val):
        if val is None:
            del self.zone
            return
        val = self._zone_validator.validate(val)
        self._zone_value = val
        self._zone_present = True

    @zone.deleter
    def zone(self):
        self._zone_value = None
        self._zone_present = False

    @property
    def district(self):
        """
        District where the address is located.

        :rtype: str
        """
        if self._district_present:
            return self._district_value
        else:
            return None

    @district.setter
    def district(self, val):
        if val is None:
            del self.district
            return
        val = self._district_validator.validate(val)
        self._district_value = val
        self._district_present = True

    @district.deleter
    def district(self):
        self._district_value = None
        self._district_present = False

    @property
    def city(self):
        """
        City code where the address belongs to.

        :rtype: str
        """
        if self._city_present:
            return self._city_value
        else:
            raise AttributeError("missing required field 'city'")

    @city.setter
    def city(self, val):
        val = self._city_validator.validate(val)
        self._city_value = val
        self._city_present = True

    @city.deleter
    def city(self):
        self._city_value = None
        self._city_present = False

    def __repr__(self):
        return 'Address(firstLine={!r}, city={!r}, geoLocation={!r}, secondLine={!r}, floor={!r}, apartment={!r}, zone={!r}, district={!r})'.format(
            self._firstLine_value,
            self._city_value,
            self._geoLocation_value,
            self._secondLine_value,
            self._floor_value,
            self._apartment_value,
            self._zone_value,
            self._district_value,
        )

Address_validator = bv.Struct(Address)

class CreateDeliveryArg(object):
    """
    :ivar receiver: Delivery receiver details object.
    :ivar pickupAddress: Delivery pickup address.
    :ivar dropOffAddress: Delivery destination address.
    :ivar notes: Instructions for the Bosta star or Bosta admins regarding the
        delivery.
    :ivar cod: Cash on delivery amount if required.
    :ivar type: Integer representation of the required service type.
    :ivar isSameDay: Whether or not the delivery should be performed on the same
        day.
    :ivar businessReference: Reference number from the client system.
    :ivar webhookUrl: URL where HTTP POST requests of state updates should be
        sent to.
    """

    __slots__ = [
        '_receiver_value',
        '_receiver_present',
        '_pickupAddress_value',
        '_pickupAddress_present',
        '_dropOffAddress_value',
        '_dropOffAddress_present',
        '_notes_value',
        '_notes_present',
        '_cod_value',
        '_cod_present',
        '_type_value',
        '_type_present',
        '_isSameDay_value',
        '_isSameDay_present',
        '_businessReference_value',
        '_businessReference_present',
        '_webhookUrl_value',
        '_webhookUrl_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 receiver=None,
                 type=None,
                 pickupAddress=None,
                 dropOffAddress=None,
                 notes=None,
                 cod=None,
                 isSameDay=None,
                 businessReference=None,
                 webhookUrl=None):
        self._receiver_value = None
        self._receiver_present = False
        self._pickupAddress_value = None
        self._pickupAddress_present = False
        self._dropOffAddress_value = None
        self._dropOffAddress_present = False
        self._notes_value = None
        self._notes_present = False
        self._cod_value = None
        self._cod_present = False
        self._type_value = None
        self._type_present = False
        self._isSameDay_value = None
        self._isSameDay_present = False
        self._businessReference_value = None
        self._businessReference_present = False
        self._webhookUrl_value = None
        self._webhookUrl_present = False
        if receiver is not None:
            self.receiver = receiver
        if pickupAddress is not None:
            self.pickupAddress = pickupAddress
        if dropOffAddress is not None:
            self.dropOffAddress = dropOffAddress
        if notes is not None:
            self.notes = notes
        if cod is not None:
            self.cod = cod
        if type is not None:
            self.type = type
        if isSameDay is not None:
            self.isSameDay = isSameDay
        if businessReference is not None:
            self.businessReference = businessReference
        if webhookUrl is not None:
            self.webhookUrl = webhookUrl

    @property
    def receiver(self):
        """
        Delivery receiver details object.

        :rtype: Receiver
        """
        if self._receiver_present:
            return self._receiver_value
        else:
            raise AttributeError("missing required field 'receiver'")

    @receiver.setter
    def receiver(self, val):
        self._receiver_validator.validate_type_only(val)
        self._receiver_value = val
        self._receiver_present = True

    @receiver.deleter
    def receiver(self):
        self._receiver_value = None
        self._receiver_present = False

    @property
    def pickupAddress(self):
        """
        Delivery pickup address.

        :rtype: Address
        """
        if self._pickupAddress_present:
            return self._pickupAddress_value
        else:
            return None

    @pickupAddress.setter
    def pickupAddress(self, val):
        if val is None:
            del self.pickupAddress
            return
        self._pickupAddress_validator.validate_type_only(val)
        self._pickupAddress_value = val
        self._pickupAddress_present = True

    @pickupAddress.deleter
    def pickupAddress(self):
        self._pickupAddress_value = None
        self._pickupAddress_present = False

    @property
    def dropOffAddress(self):
        """
        Delivery destination address.

        :rtype: Address
        """
        if self._dropOffAddress_present:
            return self._dropOffAddress_value
        else:
            return None

    @dropOffAddress.setter
    def dropOffAddress(self, val):
        if val is None:
            del self.dropOffAddress
            return
        self._dropOffAddress_validator.validate_type_only(val)
        self._dropOffAddress_value = val
        self._dropOffAddress_present = True

    @dropOffAddress.deleter
    def dropOffAddress(self):
        self._dropOffAddress_value = None
        self._dropOffAddress_present = False

    @property
    def notes(self):
        """
        Instructions for the Bosta star or Bosta admins regarding the delivery.

        :rtype: str
        """
        if self._notes_present:
            return self._notes_value
        else:
            return None

    @notes.setter
    def notes(self, val):
        if val is None:
            del self.notes
            return
        val = self._notes_validator.validate(val)
        self._notes_value = val
        self._notes_present = True

    @notes.deleter
    def notes(self):
        self._notes_value = None
        self._notes_present = False

    @property
    def cod(self):
        """
        Cash on delivery amount if required.

        :rtype: float
        """
        if self._cod_present:
            return self._cod_value
        else:
            return None

    @cod.setter
    def cod(self, val):
        if val is None:
            del self.cod
            return
        val = self._cod_validator.validate(val)
        self._cod_value = val
        self._cod_present = True

    @cod.deleter
    def cod(self):
        self._cod_value = None
        self._cod_present = False

    @property
    def type(self):
        """
        Integer representation of the required service type.

        :rtype: long
        """
        if self._type_present:
            return self._type_value
        else:
            raise AttributeError("missing required field 'type'")

    @type.setter
    def type(self, val):
        val = self._type_validator.validate(val)
        self._type_value = val
        self._type_present = True

    @type.deleter
    def type(self):
        self._type_value = None
        self._type_present = False

    @property
    def isSameDay(self):
        """
        Whether or not the delivery should be performed on the same day.

        :rtype: bool
        """
        if self._isSameDay_present:
            return self._isSameDay_value
        else:
            return None

    @isSameDay.setter
    def isSameDay(self, val):
        if val is None:
            del self.isSameDay
            return
        val = self._isSameDay_validator.validate(val)
        self._isSameDay_value = val
        self._isSameDay_present = True

    @isSameDay.deleter
    def isSameDay(self):
        self._isSameDay_value = None
        self._isSameDay_present = False

    @property
    def businessReference(self):
        """
        Reference number from the client system.

        :rtype: str
        """
        if self._businessReference_present:
            return self._businessReference_value
        else:
            return None

    @businessReference.setter
    def businessReference(self, val):
        if val is None:
            del self.businessReference
            return
        val = self._businessReference_validator.validate(val)
        self._businessReference_value = val
        self._businessReference_present = True

    @businessReference.deleter
    def businessReference(self):
        self._businessReference_value = None
        self._businessReference_present = False

    @property
    def webhookUrl(self):
        """
        URL where HTTP POST requests of state updates should be sent to.

        :rtype: str
        """
        if self._webhookUrl_present:
            return self._webhookUrl_value
        else:
            return None

    @webhookUrl.setter
    def webhookUrl(self, val):
        if val is None:
            del self.webhookUrl
            return
        val = self._webhookUrl_validator.validate(val)
        self._webhookUrl_value = val
        self._webhookUrl_present = True

    @webhookUrl.deleter
    def webhookUrl(self):
        self._webhookUrl_value = None
        self._webhookUrl_present = False

    def __repr__(self):
        return 'CreateDeliveryArg(receiver={!r}, type={!r}, pickupAddress={!r}, dropOffAddress={!r}, notes={!r}, cod={!r}, isSameDay={!r}, businessReference={!r}, webhookUrl={!r})'.format(
            self._receiver_value,
            self._type_value,
            self._pickupAddress_value,
            self._dropOffAddress_value,
            self._notes_value,
            self._cod_value,
            self._isSameDay_value,
            self._businessReference_value,
            self._webhookUrl_value,
        )

CreateDeliveryArg_validator = bv.Struct(CreateDeliveryArg)

class CreateDeliveryResult(object):
    """
    :ivar _id: ID of the created delivery.
    :ivar message: Success message.
    :ivar state: State of the created delivery.
    """

    __slots__ = [
        '__id_value',
        '__id_present',
        '_message_value',
        '_message_present',
        '_state_value',
        '_state_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 message=None,
                 state=None):
        self.__id_value = None
        self.__id_present = False
        self._message_value = None
        self._message_present = False
        self._state_value = None
        self._state_present = False
        if _id is not None:
            self._id = _id
        if message is not None:
            self.message = message
        if state is not None:
            self.state = state

    @property
    def _id(self):
        """
        ID of the created delivery.

        :rtype: str
        """
        if self.__id_present:
            return self.__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self.__id_validator.validate(val)
        self.__id_value = val
        self.__id_present = True

    @_id.deleter
    def _id(self):
        self.__id_value = None
        self.__id_present = False

    @property
    def message(self):
        """
        Success message.

        :rtype: str
        """
        if self._message_present:
            return self._message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._message_validator.validate(val)
        self._message_value = val
        self._message_present = True

    @message.deleter
    def message(self):
        self._message_value = None
        self._message_present = False

    @property
    def state(self):
        """
        State of the created delivery.

        :rtype: State
        """
        if self._state_present:
            return self._state_value
        else:
            raise AttributeError("missing required field 'state'")

    @state.setter
    def state(self, val):
        self._state_validator.validate_type_only(val)
        self._state_value = val
        self._state_present = True

    @state.deleter
    def state(self):
        self._state_value = None
        self._state_present = False

    def __repr__(self):
        return 'CreateDeliveryResult(_id={!r}, message={!r}, state={!r})'.format(
            self.__id_value,
            self._message_value,
            self._state_value,
        )

CreateDeliveryResult_validator = bv.Struct(CreateDeliveryResult)

class DeleteDeliveryResult(object):
    """
    :ivar _id: ID of the deleted delivery.
    :ivar message: Success message.
    """

    __slots__ = [
        '__id_value',
        '__id_present',
        '_message_value',
        '_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 message=None):
        self.__id_value = None
        self.__id_present = False
        self._message_value = None
        self._message_present = False
        if _id is not None:
            self._id = _id
        if message is not None:
            self.message = message

    @property
    def _id(self):
        """
        ID of the deleted delivery.

        :rtype: str
        """
        if self.__id_present:
            return self.__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self.__id_validator.validate(val)
        self.__id_value = val
        self.__id_present = True

    @_id.deleter
    def _id(self):
        self.__id_value = None
        self.__id_present = False

    @property
    def message(self):
        """
        Success message.

        :rtype: str
        """
        if self._message_present:
            return self._message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._message_validator.validate(val)
        self._message_value = val
        self._message_present = True

    @message.deleter
    def message(self):
        self._message_value = None
        self._message_present = False

    def __repr__(self):
        return 'DeleteDeliveryResult(_id={!r}, message={!r})'.format(
            self.__id_value,
            self._message_value,
        )

DeleteDeliveryResult_validator = bv.Struct(DeleteDeliveryResult)

class Delivery(object):
    """
    Delivery details.

    :ivar pickupAddress: Address details where delivery is picked up from.
    :ivar dropOffAddress: Address details where delivery is delivered to.
    :ivar receiver: Delivery receiver details.
    :ivar state: The current state of the delivery.
    :ivar trackingNumber: Bosta tracking number.
    :ivar notes: Instructions for the Bosta star or Bosta admins regarding the
        delivery.
    :ivar cod: Cash on delivery amount if required.
    :ivar businessReference: Reference number from the client system.
    """

    __slots__ = [
        '_pickupAddress_value',
        '_pickupAddress_present',
        '_dropOffAddress_value',
        '_dropOffAddress_present',
        '_receiver_value',
        '_receiver_present',
        '_state_value',
        '_state_present',
        '_trackingNumber_value',
        '_trackingNumber_present',
        '_notes_value',
        '_notes_present',
        '_cod_value',
        '_cod_present',
        '_businessReference_value',
        '_businessReference_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 pickupAddress=None,
                 dropOffAddress=None,
                 receiver=None,
                 state=None,
                 trackingNumber=None,
                 notes=None,
                 cod=None,
                 businessReference=None):
        self._pickupAddress_value = None
        self._pickupAddress_present = False
        self._dropOffAddress_value = None
        self._dropOffAddress_present = False
        self._receiver_value = None
        self._receiver_present = False
        self._state_value = None
        self._state_present = False
        self._trackingNumber_value = None
        self._trackingNumber_present = False
        self._notes_value = None
        self._notes_present = False
        self._cod_value = None
        self._cod_present = False
        self._businessReference_value = None
        self._businessReference_present = False
        if pickupAddress is not None:
            self.pickupAddress = pickupAddress
        if dropOffAddress is not None:
            self.dropOffAddress = dropOffAddress
        if receiver is not None:
            self.receiver = receiver
        if state is not None:
            self.state = state
        if trackingNumber is not None:
            self.trackingNumber = trackingNumber
        if notes is not None:
            self.notes = notes
        if cod is not None:
            self.cod = cod
        if businessReference is not None:
            self.businessReference = businessReference

    @property
    def pickupAddress(self):
        """
        Address details where delivery is picked up from.

        :rtype: Address
        """
        if self._pickupAddress_present:
            return self._pickupAddress_value
        else:
            raise AttributeError("missing required field 'pickupAddress'")

    @pickupAddress.setter
    def pickupAddress(self, val):
        self._pickupAddress_validator.validate_type_only(val)
        self._pickupAddress_value = val
        self._pickupAddress_present = True

    @pickupAddress.deleter
    def pickupAddress(self):
        self._pickupAddress_value = None
        self._pickupAddress_present = False

    @property
    def dropOffAddress(self):
        """
        Address details where delivery is delivered to.

        :rtype: Address
        """
        if self._dropOffAddress_present:
            return self._dropOffAddress_value
        else:
            raise AttributeError("missing required field 'dropOffAddress'")

    @dropOffAddress.setter
    def dropOffAddress(self, val):
        self._dropOffAddress_validator.validate_type_only(val)
        self._dropOffAddress_value = val
        self._dropOffAddress_present = True

    @dropOffAddress.deleter
    def dropOffAddress(self):
        self._dropOffAddress_value = None
        self._dropOffAddress_present = False

    @property
    def receiver(self):
        """
        Delivery receiver details.

        :rtype: Receiver
        """
        if self._receiver_present:
            return self._receiver_value
        else:
            raise AttributeError("missing required field 'receiver'")

    @receiver.setter
    def receiver(self, val):
        self._receiver_validator.validate_type_only(val)
        self._receiver_value = val
        self._receiver_present = True

    @receiver.deleter
    def receiver(self):
        self._receiver_value = None
        self._receiver_present = False

    @property
    def state(self):
        """
        The current state of the delivery.

        :rtype: State
        """
        if self._state_present:
            return self._state_value
        else:
            raise AttributeError("missing required field 'state'")

    @state.setter
    def state(self, val):
        self._state_validator.validate_type_only(val)
        self._state_value = val
        self._state_present = True

    @state.deleter
    def state(self):
        self._state_value = None
        self._state_present = False

    @property
    def trackingNumber(self):
        """
        Bosta tracking number.

        :rtype: str
        """
        if self._trackingNumber_present:
            return self._trackingNumber_value
        else:
            raise AttributeError("missing required field 'trackingNumber'")

    @trackingNumber.setter
    def trackingNumber(self, val):
        val = self._trackingNumber_validator.validate(val)
        self._trackingNumber_value = val
        self._trackingNumber_present = True

    @trackingNumber.deleter
    def trackingNumber(self):
        self._trackingNumber_value = None
        self._trackingNumber_present = False

    @property
    def notes(self):
        """
        Instructions for the Bosta star or Bosta admins regarding the delivery.

        :rtype: str
        """
        if self._notes_present:
            return self._notes_value
        else:
            return None

    @notes.setter
    def notes(self, val):
        if val is None:
            del self.notes
            return
        val = self._notes_validator.validate(val)
        self._notes_value = val
        self._notes_present = True

    @notes.deleter
    def notes(self):
        self._notes_value = None
        self._notes_present = False

    @property
    def cod(self):
        """
        Cash on delivery amount if required.

        :rtype: float
        """
        if self._cod_present:
            return self._cod_value
        else:
            return None

    @cod.setter
    def cod(self, val):
        if val is None:
            del self.cod
            return
        val = self._cod_validator.validate(val)
        self._cod_value = val
        self._cod_present = True

    @cod.deleter
    def cod(self):
        self._cod_value = None
        self._cod_present = False

    @property
    def businessReference(self):
        """
        Reference number from the client system.

        :rtype: str
        """
        if self._businessReference_present:
            return self._businessReference_value
        else:
            return None

    @businessReference.setter
    def businessReference(self, val):
        if val is None:
            del self.businessReference
            return
        val = self._businessReference_validator.validate(val)
        self._businessReference_value = val
        self._businessReference_present = True

    @businessReference.deleter
    def businessReference(self):
        self._businessReference_value = None
        self._businessReference_present = False

    def __repr__(self):
        return 'Delivery(pickupAddress={!r}, dropOffAddress={!r}, receiver={!r}, state={!r}, trackingNumber={!r}, notes={!r}, cod={!r}, businessReference={!r})'.format(
            self._pickupAddress_value,
            self._dropOffAddress_value,
            self._receiver_value,
            self._state_value,
            self._trackingNumber_value,
            self._notes_value,
            self._cod_value,
            self._businessReference_value,
        )

Delivery_validator = bv.Struct(Delivery)

class Error(object):
    """
    Error object returned by the API.

    :ivar code: Error code.
    :ivar message: Error message.
    """

    __slots__ = [
        '_code_value',
        '_code_present',
        '_message_value',
        '_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 code=None,
                 message=None):
        self._code_value = None
        self._code_present = False
        self._message_value = None
        self._message_present = False
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message

    @property
    def code(self):
        """
        Error code.

        :rtype: long
        """
        if self._code_present:
            return self._code_value
        else:
            raise AttributeError("missing required field 'code'")

    @code.setter
    def code(self, val):
        val = self._code_validator.validate(val)
        self._code_value = val
        self._code_present = True

    @code.deleter
    def code(self):
        self._code_value = None
        self._code_present = False

    @property
    def message(self):
        """
        Error message.

        :rtype: str
        """
        if self._message_present:
            return self._message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._message_validator.validate(val)
        self._message_value = val
        self._message_present = True

    @message.deleter
    def message(self):
        self._message_value = None
        self._message_present = False

    def __repr__(self):
        return 'Error(code={!r}, message={!r})'.format(
            self._code_value,
            self._message_value,
        )

Error_validator = bv.Struct(Error)

class GetDeliveryArg(object):
    """
    :ivar _id: ID of the requested delivery.
    """

    __slots__ = [
        '__id_value',
        '__id_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None):
        self.__id_value = None
        self.__id_present = False
        if _id is not None:
            self._id = _id

    @property
    def _id(self):
        """
        ID of the requested delivery.

        :rtype: str
        """
        if self.__id_present:
            return self.__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self.__id_validator.validate(val)
        self.__id_value = val
        self.__id_present = True

    @_id.deleter
    def _id(self):
        self.__id_value = None
        self.__id_present = False

    def __repr__(self):
        return 'GetDeliveryArg(_id={!r})'.format(
            self.__id_value,
        )

GetDeliveryArg_validator = bv.Struct(GetDeliveryArg)

class GetDeliveryResult(object):
    """
    :ivar delivery: The Delivery object with the given ID.
    """

    __slots__ = [
        '_delivery_value',
        '_delivery_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 delivery=None):
        self._delivery_value = None
        self._delivery_present = False
        if delivery is not None:
            self.delivery = delivery

    @property
    def delivery(self):
        """
        The Delivery object with the given ID.

        :rtype: Delivery
        """
        if self._delivery_present:
            return self._delivery_value
        else:
            raise AttributeError("missing required field 'delivery'")

    @delivery.setter
    def delivery(self, val):
        self._delivery_validator.validate_type_only(val)
        self._delivery_value = val
        self._delivery_present = True

    @delivery.deleter
    def delivery(self):
        self._delivery_value = None
        self._delivery_present = False

    def __repr__(self):
        return 'GetDeliveryResult(delivery={!r})'.format(
            self._delivery_value,
        )

GetDeliveryResult_validator = bv.Struct(GetDeliveryResult)

class ListDeliveryArg(object):
    """
    :ivar page: Page number if the result is paginated.
    :ivar perPage: The limit of number of deliveries that are retrieved in one
        request.
    """

    __slots__ = [
        '_page_value',
        '_page_present',
        '_perPage_value',
        '_perPage_present',
    ]

    _has_required_fields = False

    def __init__(self,
                 page=None,
                 perPage=None):
        self._page_value = None
        self._page_present = False
        self._perPage_value = None
        self._perPage_present = False
        if page is not None:
            self.page = page
        if perPage is not None:
            self.perPage = perPage

    @property
    def page(self):
        """
        Page number if the result is paginated.

        :rtype: long
        """
        if self._page_present:
            return self._page_value
        else:
            return None

    @page.setter
    def page(self, val):
        if val is None:
            del self.page
            return
        val = self._page_validator.validate(val)
        self._page_value = val
        self._page_present = True

    @page.deleter
    def page(self):
        self._page_value = None
        self._page_present = False

    @property
    def perPage(self):
        """
        The limit of number of deliveries that are retrieved in one request.

        :rtype: long
        """
        if self._perPage_present:
            return self._perPage_value
        else:
            return None

    @perPage.setter
    def perPage(self, val):
        if val is None:
            del self.perPage
            return
        val = self._perPage_validator.validate(val)
        self._perPage_value = val
        self._perPage_present = True

    @perPage.deleter
    def perPage(self):
        self._perPage_value = None
        self._perPage_present = False

    def __repr__(self):
        return 'ListDeliveryArg(page={!r}, perPage={!r})'.format(
            self._page_value,
            self._perPage_value,
        )

ListDeliveryArg_validator = bv.Struct(ListDeliveryArg)

class ListDeliveryResult(object):
    """
    :ivar deliveries: List of Delivery objects created by the business account.
    """

    __slots__ = [
        '_deliveries_value',
        '_deliveries_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 deliveries=None):
        self._deliveries_value = None
        self._deliveries_present = False
        if deliveries is not None:
            self.deliveries = deliveries

    @property
    def deliveries(self):
        """
        List of Delivery objects created by the business account.

        :rtype: list of [Delivery]
        """
        if self._deliveries_present:
            return self._deliveries_value
        else:
            raise AttributeError("missing required field 'deliveries'")

    @deliveries.setter
    def deliveries(self, val):
        val = self._deliveries_validator.validate(val)
        self._deliveries_value = val
        self._deliveries_present = True

    @deliveries.deleter
    def deliveries(self):
        self._deliveries_value = None
        self._deliveries_present = False

    def __repr__(self):
        return 'ListDeliveryResult(deliveries={!r})'.format(
            self._deliveries_value,
        )

ListDeliveryResult_validator = bv.Struct(ListDeliveryResult)

class Receiver(object):
    """
    Receiver of a delivery.

    :ivar firstName: Receiver's first name.
    :ivar lastName: Receiver's last name.
    :ivar phone: Receiver's phone number starting with country code.
    :ivar email: Receiver's email address.
    """

    __slots__ = [
        '_firstName_value',
        '_firstName_present',
        '_lastName_value',
        '_lastName_present',
        '_phone_value',
        '_phone_present',
        '_email_value',
        '_email_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 firstName=None,
                 lastName=None,
                 phone=None,
                 email=None):
        self._firstName_value = None
        self._firstName_present = False
        self._lastName_value = None
        self._lastName_present = False
        self._phone_value = None
        self._phone_present = False
        self._email_value = None
        self._email_present = False
        if firstName is not None:
            self.firstName = firstName
        if lastName is not None:
            self.lastName = lastName
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email

    @property
    def firstName(self):
        """
        Receiver's first name.

        :rtype: str
        """
        if self._firstName_present:
            return self._firstName_value
        else:
            raise AttributeError("missing required field 'firstName'")

    @firstName.setter
    def firstName(self, val):
        val = self._firstName_validator.validate(val)
        self._firstName_value = val
        self._firstName_present = True

    @firstName.deleter
    def firstName(self):
        self._firstName_value = None
        self._firstName_present = False

    @property
    def lastName(self):
        """
        Receiver's last name.

        :rtype: str
        """
        if self._lastName_present:
            return self._lastName_value
        else:
            raise AttributeError("missing required field 'lastName'")

    @lastName.setter
    def lastName(self, val):
        val = self._lastName_validator.validate(val)
        self._lastName_value = val
        self._lastName_present = True

    @lastName.deleter
    def lastName(self):
        self._lastName_value = None
        self._lastName_present = False

    @property
    def phone(self):
        """
        Receiver's phone number starting with country code.

        :rtype: str
        """
        if self._phone_present:
            return self._phone_value
        else:
            raise AttributeError("missing required field 'phone'")

    @phone.setter
    def phone(self, val):
        val = self._phone_validator.validate(val)
        self._phone_value = val
        self._phone_present = True

    @phone.deleter
    def phone(self):
        self._phone_value = None
        self._phone_present = False

    @property
    def email(self):
        """
        Receiver's email address.

        :rtype: str
        """
        if self._email_present:
            return self._email_value
        else:
            return None

    @email.setter
    def email(self, val):
        if val is None:
            del self.email
            return
        val = self._email_validator.validate(val)
        self._email_value = val
        self._email_present = True

    @email.deleter
    def email(self):
        self._email_value = None
        self._email_present = False

    def __repr__(self):
        return 'Receiver(firstName={!r}, lastName={!r}, phone={!r}, email={!r})'.format(
            self._firstName_value,
            self._lastName_value,
            self._phone_value,
            self._email_value,
        )

Receiver_validator = bv.Struct(Receiver)

class RequestError(object):
    """
    :ivar errors: List of errors.
    """

    __slots__ = [
        '_errors_value',
        '_errors_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 errors=None):
        self._errors_value = None
        self._errors_present = False
        if errors is not None:
            self.errors = errors

    @property
    def errors(self):
        """
        List of errors.

        :rtype: list of [Error]
        """
        if self._errors_present:
            return self._errors_value
        else:
            raise AttributeError("missing required field 'errors'")

    @errors.setter
    def errors(self, val):
        val = self._errors_validator.validate(val)
        self._errors_value = val
        self._errors_present = True

    @errors.deleter
    def errors(self):
        self._errors_value = None
        self._errors_present = False

    def __repr__(self):
        return 'RequestError(errors={!r})'.format(
            self._errors_value,
        )

RequestError_validator = bv.Struct(RequestError)

class State(object):
    """
    State of a delivery.

    :ivar value: Delivery state name.
    :ivar code: Integer representation of delivery state.
    """

    __slots__ = [
        '_value_value',
        '_value_present',
        '_code_value',
        '_code_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 value=None,
                 code=None):
        self._value_value = None
        self._value_present = False
        self._code_value = None
        self._code_present = False
        if value is not None:
            self.value = value
        if code is not None:
            self.code = code

    @property
    def value(self):
        """
        Delivery state name.

        :rtype: str
        """
        if self._value_present:
            return self._value_value
        else:
            raise AttributeError("missing required field 'value'")

    @value.setter
    def value(self, val):
        val = self._value_validator.validate(val)
        self._value_value = val
        self._value_present = True

    @value.deleter
    def value(self):
        self._value_value = None
        self._value_present = False

    @property
    def code(self):
        """
        Integer representation of delivery state.

        :rtype: long
        """
        if self._code_present:
            return self._code_value
        else:
            raise AttributeError("missing required field 'code'")

    @code.setter
    def code(self, val):
        val = self._code_validator.validate(val)
        self._code_value = val
        self._code_present = True

    @code.deleter
    def code(self):
        self._code_value = None
        self._code_present = False

    def __repr__(self):
        return 'State(value={!r}, code={!r})'.format(
            self._value_value,
            self._code_value,
        )

State_validator = bv.Struct(State)

class Type(object):
    """
    Service type.

    :ivar value: Service type name.
    :ivar code: Integer representation of the service type.
    """

    __slots__ = [
        '_value_value',
        '_value_present',
        '_code_value',
        '_code_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 value=None,
                 code=None):
        self._value_value = None
        self._value_present = False
        self._code_value = None
        self._code_present = False
        if value is not None:
            self.value = value
        if code is not None:
            self.code = code

    @property
    def value(self):
        """
        Service type name.

        :rtype: str
        """
        if self._value_present:
            return self._value_value
        else:
            raise AttributeError("missing required field 'value'")

    @value.setter
    def value(self, val):
        val = self._value_validator.validate(val)
        self._value_value = val
        self._value_present = True

    @value.deleter
    def value(self):
        self._value_value = None
        self._value_present = False

    @property
    def code(self):
        """
        Integer representation of the service type.

        :rtype: long
        """
        if self._code_present:
            return self._code_value
        else:
            raise AttributeError("missing required field 'code'")

    @code.setter
    def code(self, val):
        val = self._code_validator.validate(val)
        self._code_value = val
        self._code_present = True

    @code.deleter
    def code(self):
        self._code_value = None
        self._code_present = False

    def __repr__(self):
        return 'Type(value={!r}, code={!r})'.format(
            self._value_value,
            self._code_value,
        )

Type_validator = bv.Struct(Type)

class UpdateDeliveryArg(object):
    """
    :ivar receiver: Delivery receiver details object.
    :ivar pickupAddress: Delivery pickup address.
    :ivar dropOffAddress: Delivery destination address.
    :ivar notes: Instructions for the Bosta star or Bosta admins regarding the
        delivery.
    :ivar cod: Cash on delivery amount if required.
    :ivar businessReference: Reference number from the client system.
    :ivar webhookUrl: URL where HTTP POST requests of state updates should be
        sent to.
    """

    __slots__ = [
        '_receiver_value',
        '_receiver_present',
        '_pickupAddress_value',
        '_pickupAddress_present',
        '_dropOffAddress_value',
        '_dropOffAddress_present',
        '_notes_value',
        '_notes_present',
        '_cod_value',
        '_cod_present',
        '_businessReference_value',
        '_businessReference_present',
        '_webhookUrl_value',
        '_webhookUrl_present',
    ]

    _has_required_fields = False

    def __init__(self,
                 receiver=None,
                 pickupAddress=None,
                 dropOffAddress=None,
                 notes=None,
                 cod=None,
                 businessReference=None,
                 webhookUrl=None):
        self._receiver_value = None
        self._receiver_present = False
        self._pickupAddress_value = None
        self._pickupAddress_present = False
        self._dropOffAddress_value = None
        self._dropOffAddress_present = False
        self._notes_value = None
        self._notes_present = False
        self._cod_value = None
        self._cod_present = False
        self._businessReference_value = None
        self._businessReference_present = False
        self._webhookUrl_value = None
        self._webhookUrl_present = False
        if receiver is not None:
            self.receiver = receiver
        if pickupAddress is not None:
            self.pickupAddress = pickupAddress
        if dropOffAddress is not None:
            self.dropOffAddress = dropOffAddress
        if notes is not None:
            self.notes = notes
        if cod is not None:
            self.cod = cod
        if businessReference is not None:
            self.businessReference = businessReference
        if webhookUrl is not None:
            self.webhookUrl = webhookUrl

    @property
    def receiver(self):
        """
        Delivery receiver details object.

        :rtype: Receiver
        """
        if self._receiver_present:
            return self._receiver_value
        else:
            return None

    @receiver.setter
    def receiver(self, val):
        if val is None:
            del self.receiver
            return
        self._receiver_validator.validate_type_only(val)
        self._receiver_value = val
        self._receiver_present = True

    @receiver.deleter
    def receiver(self):
        self._receiver_value = None
        self._receiver_present = False

    @property
    def pickupAddress(self):
        """
        Delivery pickup address.

        :rtype: Address
        """
        if self._pickupAddress_present:
            return self._pickupAddress_value
        else:
            return None

    @pickupAddress.setter
    def pickupAddress(self, val):
        if val is None:
            del self.pickupAddress
            return
        self._pickupAddress_validator.validate_type_only(val)
        self._pickupAddress_value = val
        self._pickupAddress_present = True

    @pickupAddress.deleter
    def pickupAddress(self):
        self._pickupAddress_value = None
        self._pickupAddress_present = False

    @property
    def dropOffAddress(self):
        """
        Delivery destination address.

        :rtype: Address
        """
        if self._dropOffAddress_present:
            return self._dropOffAddress_value
        else:
            return None

    @dropOffAddress.setter
    def dropOffAddress(self, val):
        if val is None:
            del self.dropOffAddress
            return
        self._dropOffAddress_validator.validate_type_only(val)
        self._dropOffAddress_value = val
        self._dropOffAddress_present = True

    @dropOffAddress.deleter
    def dropOffAddress(self):
        self._dropOffAddress_value = None
        self._dropOffAddress_present = False

    @property
    def notes(self):
        """
        Instructions for the Bosta star or Bosta admins regarding the delivery.

        :rtype: str
        """
        if self._notes_present:
            return self._notes_value
        else:
            return None

    @notes.setter
    def notes(self, val):
        if val is None:
            del self.notes
            return
        val = self._notes_validator.validate(val)
        self._notes_value = val
        self._notes_present = True

    @notes.deleter
    def notes(self):
        self._notes_value = None
        self._notes_present = False

    @property
    def cod(self):
        """
        Cash on delivery amount if required.

        :rtype: long
        """
        if self._cod_present:
            return self._cod_value
        else:
            return None

    @cod.setter
    def cod(self, val):
        if val is None:
            del self.cod
            return
        val = self._cod_validator.validate(val)
        self._cod_value = val
        self._cod_present = True

    @cod.deleter
    def cod(self):
        self._cod_value = None
        self._cod_present = False

    @property
    def businessReference(self):
        """
        Reference number from the client system.

        :rtype: str
        """
        if self._businessReference_present:
            return self._businessReference_value
        else:
            return None

    @businessReference.setter
    def businessReference(self, val):
        if val is None:
            del self.businessReference
            return
        val = self._businessReference_validator.validate(val)
        self._businessReference_value = val
        self._businessReference_present = True

    @businessReference.deleter
    def businessReference(self):
        self._businessReference_value = None
        self._businessReference_present = False

    @property
    def webhookUrl(self):
        """
        URL where HTTP POST requests of state updates should be sent to.

        :rtype: str
        """
        if self._webhookUrl_present:
            return self._webhookUrl_value
        else:
            return None

    @webhookUrl.setter
    def webhookUrl(self, val):
        if val is None:
            del self.webhookUrl
            return
        val = self._webhookUrl_validator.validate(val)
        self._webhookUrl_value = val
        self._webhookUrl_present = True

    @webhookUrl.deleter
    def webhookUrl(self):
        self._webhookUrl_value = None
        self._webhookUrl_present = False

    def __repr__(self):
        return 'UpdateDeliveryArg(receiver={!r}, pickupAddress={!r}, dropOffAddress={!r}, notes={!r}, cod={!r}, businessReference={!r}, webhookUrl={!r})'.format(
            self._receiver_value,
            self._pickupAddress_value,
            self._dropOffAddress_value,
            self._notes_value,
            self._cod_value,
            self._businessReference_value,
            self._webhookUrl_value,
        )

UpdateDeliveryArg_validator = bv.Struct(UpdateDeliveryArg)

class UpdateDeliveryResult(object):
    """
    :ivar _id: ID of the updated delivery.
    :ivar message: Success message.
    """

    __slots__ = [
        '__id_value',
        '__id_present',
        '_message_value',
        '_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 message=None):
        self.__id_value = None
        self.__id_present = False
        self._message_value = None
        self._message_present = False
        if _id is not None:
            self._id = _id
        if message is not None:
            self.message = message

    @property
    def _id(self):
        """
        ID of the updated delivery.

        :rtype: str
        """
        if self.__id_present:
            return self.__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self.__id_validator.validate(val)
        self.__id_value = val
        self.__id_present = True

    @_id.deleter
    def _id(self):
        self.__id_value = None
        self.__id_present = False

    @property
    def message(self):
        """
        Success message.

        :rtype: str
        """
        if self._message_present:
            return self._message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._message_validator.validate(val)
        self._message_value = val
        self._message_present = True

    @message.deleter
    def message(self):
        self._message_value = None
        self._message_present = False

    def __repr__(self):
        return 'UpdateDeliveryResult(_id={!r}, message={!r})'.format(
            self.__id_value,
            self._message_value,
        )

UpdateDeliveryResult_validator = bv.Struct(UpdateDeliveryResult)

Address._geoLocation_validator = bv.Nullable(bv.List(bv.Float32(), max_items=2))
Address._firstLine_validator = bv.String()
Address._secondLine_validator = bv.Nullable(bv.String())
Address._floor_validator = bv.Nullable(bv.Int32())
Address._apartment_validator = bv.Nullable(bv.Int32())
Address._zone_validator = bv.Nullable(bv.String())
Address._district_validator = bv.Nullable(bv.String())
Address._city_validator = bv.String(pattern='^EG-0(1|2)$')
Address._all_field_names_ = set([
    'geoLocation',
    'firstLine',
    'secondLine',
    'floor',
    'apartment',
    'zone',
    'district',
    'city',
])
Address._all_fields_ = [
    ('geoLocation', Address._geoLocation_validator),
    ('firstLine', Address._firstLine_validator),
    ('secondLine', Address._secondLine_validator),
    ('floor', Address._floor_validator),
    ('apartment', Address._apartment_validator),
    ('zone', Address._zone_validator),
    ('district', Address._district_validator),
    ('city', Address._city_validator),
]

CreateDeliveryArg._receiver_validator = Receiver_validator
CreateDeliveryArg._pickupAddress_validator = bv.Nullable(Address_validator)
CreateDeliveryArg._dropOffAddress_validator = bv.Nullable(Address_validator)
CreateDeliveryArg._notes_validator = bv.Nullable(bv.String())
CreateDeliveryArg._cod_validator = bv.Nullable(bv.Float32())
CreateDeliveryArg._type_validator = bv.Int32()
CreateDeliveryArg._isSameDay_validator = bv.Nullable(bv.Boolean())
CreateDeliveryArg._businessReference_validator = bv.Nullable(bv.String())
CreateDeliveryArg._webhookUrl_validator = bv.Nullable(bv.String())
CreateDeliveryArg._all_field_names_ = set([
    'receiver',
    'pickupAddress',
    'dropOffAddress',
    'notes',
    'cod',
    'type',
    'isSameDay',
    'businessReference',
    'webhookUrl',
])
CreateDeliveryArg._all_fields_ = [
    ('receiver', CreateDeliveryArg._receiver_validator),
    ('pickupAddress', CreateDeliveryArg._pickupAddress_validator),
    ('dropOffAddress', CreateDeliveryArg._dropOffAddress_validator),
    ('notes', CreateDeliveryArg._notes_validator),
    ('cod', CreateDeliveryArg._cod_validator),
    ('type', CreateDeliveryArg._type_validator),
    ('isSameDay', CreateDeliveryArg._isSameDay_validator),
    ('businessReference', CreateDeliveryArg._businessReference_validator),
    ('webhookUrl', CreateDeliveryArg._webhookUrl_validator),
]

CreateDeliveryResult.__id_validator = bv.String()
CreateDeliveryResult._message_validator = bv.String()
CreateDeliveryResult._state_validator = State_validator
CreateDeliveryResult._all_field_names_ = set([
    '_id',
    'message',
    'state',
])
CreateDeliveryResult._all_fields_ = [
    ('_id', CreateDeliveryResult.__id_validator),
    ('message', CreateDeliveryResult._message_validator),
    ('state', CreateDeliveryResult._state_validator),
]

DeleteDeliveryResult.__id_validator = bv.String()
DeleteDeliveryResult._message_validator = bv.String()
DeleteDeliveryResult._all_field_names_ = set([
    '_id',
    'message',
])
DeleteDeliveryResult._all_fields_ = [
    ('_id', DeleteDeliveryResult.__id_validator),
    ('message', DeleteDeliveryResult._message_validator),
]

Delivery._pickupAddress_validator = Address_validator
Delivery._dropOffAddress_validator = Address_validator
Delivery._receiver_validator = Receiver_validator
Delivery._state_validator = State_validator
Delivery._trackingNumber_validator = bv.String()
Delivery._notes_validator = bv.Nullable(bv.String())
Delivery._cod_validator = bv.Nullable(bv.Float32())
Delivery._businessReference_validator = bv.Nullable(bv.String())
Delivery._all_field_names_ = set([
    'pickupAddress',
    'dropOffAddress',
    'receiver',
    'state',
    'trackingNumber',
    'notes',
    'cod',
    'businessReference',
])
Delivery._all_fields_ = [
    ('pickupAddress', Delivery._pickupAddress_validator),
    ('dropOffAddress', Delivery._dropOffAddress_validator),
    ('receiver', Delivery._receiver_validator),
    ('state', Delivery._state_validator),
    ('trackingNumber', Delivery._trackingNumber_validator),
    ('notes', Delivery._notes_validator),
    ('cod', Delivery._cod_validator),
    ('businessReference', Delivery._businessReference_validator),
]

Error._code_validator = bv.Int32()
Error._message_validator = bv.String()
Error._all_field_names_ = set([
    'code',
    'message',
])
Error._all_fields_ = [
    ('code', Error._code_validator),
    ('message', Error._message_validator),
]

GetDeliveryArg.__id_validator = bv.String()
GetDeliveryArg._all_field_names_ = set(['_id'])
GetDeliveryArg._all_fields_ = [('_id', GetDeliveryArg.__id_validator)]

GetDeliveryResult._delivery_validator = Delivery_validator
GetDeliveryResult._all_field_names_ = set(['delivery'])
GetDeliveryResult._all_fields_ = [('delivery', GetDeliveryResult._delivery_validator)]

ListDeliveryArg._page_validator = bv.Nullable(bv.Int32())
ListDeliveryArg._perPage_validator = bv.Nullable(bv.Int32())
ListDeliveryArg._all_field_names_ = set([
    'page',
    'perPage',
])
ListDeliveryArg._all_fields_ = [
    ('page', ListDeliveryArg._page_validator),
    ('perPage', ListDeliveryArg._perPage_validator),
]

ListDeliveryResult._deliveries_validator = bv.List(Delivery_validator)
ListDeliveryResult._all_field_names_ = set(['deliveries'])
ListDeliveryResult._all_fields_ = [('deliveries', ListDeliveryResult._deliveries_validator)]

Receiver._firstName_validator = bv.String()
Receiver._lastName_validator = bv.String()
Receiver._phone_validator = bv.String()
Receiver._email_validator = bv.Nullable(bv.String())
Receiver._all_field_names_ = set([
    'firstName',
    'lastName',
    'phone',
    'email',
])
Receiver._all_fields_ = [
    ('firstName', Receiver._firstName_validator),
    ('lastName', Receiver._lastName_validator),
    ('phone', Receiver._phone_validator),
    ('email', Receiver._email_validator),
]

RequestError._errors_validator = bv.List(Error_validator)
RequestError._all_field_names_ = set(['errors'])
RequestError._all_fields_ = [('errors', RequestError._errors_validator)]

State._value_validator = bv.String()
State._code_validator = bv.Int32()
State._all_field_names_ = set([
    'value',
    'code',
])
State._all_fields_ = [
    ('value', State._value_validator),
    ('code', State._code_validator),
]

Type._value_validator = bv.String()
Type._code_validator = bv.Int32()
Type._all_field_names_ = set([
    'value',
    'code',
])
Type._all_fields_ = [
    ('value', Type._value_validator),
    ('code', Type._code_validator),
]

UpdateDeliveryArg._receiver_validator = bv.Nullable(Receiver_validator)
UpdateDeliveryArg._pickupAddress_validator = bv.Nullable(Address_validator)
UpdateDeliveryArg._dropOffAddress_validator = bv.Nullable(Address_validator)
UpdateDeliveryArg._notes_validator = bv.Nullable(bv.String())
UpdateDeliveryArg._cod_validator = bv.Nullable(bv.Int32())
UpdateDeliveryArg._businessReference_validator = bv.Nullable(bv.String())
UpdateDeliveryArg._webhookUrl_validator = bv.Nullable(bv.String())
UpdateDeliveryArg._all_field_names_ = set([
    'receiver',
    'pickupAddress',
    'dropOffAddress',
    'notes',
    'cod',
    'businessReference',
    'webhookUrl',
])
UpdateDeliveryArg._all_fields_ = [
    ('receiver', UpdateDeliveryArg._receiver_validator),
    ('pickupAddress', UpdateDeliveryArg._pickupAddress_validator),
    ('dropOffAddress', UpdateDeliveryArg._dropOffAddress_validator),
    ('notes', UpdateDeliveryArg._notes_validator),
    ('cod', UpdateDeliveryArg._cod_validator),
    ('businessReference', UpdateDeliveryArg._businessReference_validator),
    ('webhookUrl', UpdateDeliveryArg._webhookUrl_validator),
]

UpdateDeliveryResult.__id_validator = bv.String()
UpdateDeliveryResult._message_validator = bv.String()
UpdateDeliveryResult._all_field_names_ = set([
    '_id',
    'message',
])
UpdateDeliveryResult._all_fields_ = [
    ('_id', UpdateDeliveryResult.__id_validator),
    ('message', UpdateDeliveryResult._message_validator),
]

create = bb.Route(
    'create',
    False,
    CreateDeliveryArg_validator,
    CreateDeliveryResult_validator,
    RequestError_validator,
    {},
)
delete = bb.Route(
    'delete',
    False,
    bv.Void(),
    DeleteDeliveryResult_validator,
    RequestError_validator,
    {},
)
get = bb.Route(
    'get',
    False,
    GetDeliveryArg_validator,
    GetDeliveryResult_validator,
    RequestError_validator,
    {},
)
list = bb.Route(
    'list',
    False,
    ListDeliveryArg_validator,
    ListDeliveryResult_validator,
    RequestError_validator,
    {},
)
update = bb.Route(
    'update',
    False,
    UpdateDeliveryArg_validator,
    UpdateDeliveryResult_validator,
    RequestError_validator,
    {},
)

ROUTES = {
    'create': create,
    'delete': delete,
    'get': get,
    'list': list,
    'update': update,
}

