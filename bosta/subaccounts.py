# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file
"""
This namespace contains the endpoints and data types for working with sub accounts.
"""

try:
    from . import stone_validators as bv
    from . import stone_base as bb
except (ImportError, SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import stone_validators as bv
    import stone_base as bb

try:
    from . import (
        common,
    )
except (ImportError, SystemError, ValueError):
    import common

class CreateSubAccountArg(object):
    """
    :ivar name: Sub account's business name.
    :ivar phone: Sub account's business phone.
    :ivar address: Sub account's business address.
    """

    __slots__ = [
        '_stone_name_value',
        '_stone_name_present',
        '_stone_phone_value',
        '_stone_phone_present',
        '_stone_address_value',
        '_stone_address_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 name=None,
                 phone=None,
                 address=None):
        self._stone_name_value = None
        self._stone_name_present = False
        self._stone_phone_value = None
        self._stone_phone_present = False
        self._stone_address_value = None
        self._stone_address_present = False
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address

    @property
    def name(self):
        """
        Sub account's business name.

        :rtype: str
        """
        if self._stone_name_present:
            return self._stone_name_value
        else:
            raise AttributeError("missing required field 'name'")

    @name.setter
    def name(self, val):
        val = self._stone_name_validator.validate(val)
        self._stone_name_value = val
        self._stone_name_present = True

    @name.deleter
    def name(self):
        self._stone_name_value = None
        self._stone_name_present = False

    @property
    def phone(self):
        """
        Sub account's business phone.

        :rtype: str
        """
        if self._stone_phone_present:
            return self._stone_phone_value
        else:
            raise AttributeError("missing required field 'phone'")

    @phone.setter
    def phone(self, val):
        val = self._stone_phone_validator.validate(val)
        self._stone_phone_value = val
        self._stone_phone_present = True

    @phone.deleter
    def phone(self):
        self._stone_phone_value = None
        self._stone_phone_present = False

    @property
    def address(self):
        """
        Sub account's business address.

        :rtype: common.Address_validator
        """
        if self._stone_address_present:
            return self._stone_address_value
        else:
            raise AttributeError("missing required field 'address'")

    @address.setter
    def address(self, val):
        self._stone_address_validator.validate_type_only(val)
        self._stone_address_value = val
        self._stone_address_present = True

    @address.deleter
    def address(self):
        self._stone_address_value = None
        self._stone_address_present = False

    def __repr__(self):
        return 'CreateSubAccountArg(name={!r}, phone={!r}, address={!r})'.format(
            self._stone_name_value,
            self._stone_phone_value,
            self._stone_address_value,
        )

CreateSubAccountArg_validator = bv.Struct(CreateSubAccountArg)

class CreateSubAccountResult(object):
    """
    :ivar _id: ID of the created sub account.
    :ivar message: Success message.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
        '_stone_message_value',
        '_stone_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 message=None):
        self._stone__id_value = None
        self._stone__id_present = False
        self._stone_message_value = None
        self._stone_message_present = False
        if _id is not None:
            self._id = _id
        if message is not None:
            self.message = message

    @property
    def _id(self):
        """
        ID of the created sub account.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    @property
    def message(self):
        """
        Success message.

        :rtype: str
        """
        if self._stone_message_present:
            return self._stone_message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._stone_message_validator.validate(val)
        self._stone_message_value = val
        self._stone_message_present = True

    @message.deleter
    def message(self):
        self._stone_message_value = None
        self._stone_message_present = False

    def __repr__(self):
        return 'CreateSubAccountResult(_id={!r}, message={!r})'.format(
            self._stone__id_value,
            self._stone_message_value,
        )

CreateSubAccountResult_validator = bv.Struct(CreateSubAccountResult)

class DeleteSubAccountArg(object):
    """
    :ivar _id: ID of the sub account to delete.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None):
        self._stone__id_value = None
        self._stone__id_present = False
        if _id is not None:
            self._id = _id

    @property
    def _id(self):
        """
        ID of the sub account to delete.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    def __repr__(self):
        return 'DeleteSubAccountArg(_id={!r})'.format(
            self._stone__id_value,
        )

DeleteSubAccountArg_validator = bv.Struct(DeleteSubAccountArg)

class DeleteSubAccountResult(object):
    """
    :ivar _id: ID of the deleted sub account.
    :ivar message: Success message.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
        '_stone_message_value',
        '_stone_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 message=None):
        self._stone__id_value = None
        self._stone__id_present = False
        self._stone_message_value = None
        self._stone_message_present = False
        if _id is not None:
            self._id = _id
        if message is not None:
            self.message = message

    @property
    def _id(self):
        """
        ID of the deleted sub account.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    @property
    def message(self):
        """
        Success message.

        :rtype: str
        """
        if self._stone_message_present:
            return self._stone_message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._stone_message_validator.validate(val)
        self._stone_message_value = val
        self._stone_message_present = True

    @message.deleter
    def message(self):
        self._stone_message_value = None
        self._stone_message_present = False

    def __repr__(self):
        return 'DeleteSubAccountResult(_id={!r}, message={!r})'.format(
            self._stone__id_value,
            self._stone_message_value,
        )

DeleteSubAccountResult_validator = bv.Struct(DeleteSubAccountResult)

class GetSubAccountArg(object):
    """
    :ivar _id: ID of the requested sub account.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None):
        self._stone__id_value = None
        self._stone__id_present = False
        if _id is not None:
            self._id = _id

    @property
    def _id(self):
        """
        ID of the requested sub account.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    def __repr__(self):
        return 'GetSubAccountArg(_id={!r})'.format(
            self._stone__id_value,
        )

GetSubAccountArg_validator = bv.Struct(GetSubAccountArg)

class GetSubAccountResult(object):
    """
    :ivar subAccount: The SubAccount object with the given ID.
    """

    __slots__ = [
        '_stone_subAccount_value',
        '_stone_subAccount_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 subAccount=None):
        self._stone_subAccount_value = None
        self._stone_subAccount_present = False
        if subAccount is not None:
            self.subAccount = subAccount

    @property
    def subAccount(self):
        """
        The SubAccount object with the given ID.

        :rtype: SubAccount
        """
        if self._stone_subAccount_present:
            return self._stone_subAccount_value
        else:
            raise AttributeError("missing required field 'subAccount'")

    @subAccount.setter
    def subAccount(self, val):
        self._stone_subAccount_validator.validate_type_only(val)
        self._stone_subAccount_value = val
        self._stone_subAccount_present = True

    @subAccount.deleter
    def subAccount(self):
        self._stone_subAccount_value = None
        self._stone_subAccount_present = False

    def __repr__(self):
        return 'GetSubAccountResult(subAccount={!r})'.format(
            self._stone_subAccount_value,
        )

GetSubAccountResult_validator = bv.Struct(GetSubAccountResult)

class ListSubAccountArg(object):
    """
    :ivar page: Page number if the result is paginated.
    :ivar perPage: The limit of number of sub accounts that are retrieved in one
        request.
    """

    __slots__ = [
        '_stone_page_value',
        '_stone_page_present',
        '_stone_perPage_value',
        '_stone_perPage_present',
    ]

    _has_required_fields = False

    def __init__(self,
                 page=None,
                 perPage=None):
        self._stone_page_value = None
        self._stone_page_present = False
        self._stone_perPage_value = None
        self._stone_perPage_present = False
        if page is not None:
            self.page = page
        if perPage is not None:
            self.perPage = perPage

    @property
    def page(self):
        """
        Page number if the result is paginated.

        :rtype: long
        """
        if self._stone_page_present:
            return self._stone_page_value
        else:
            return None

    @page.setter
    def page(self, val):
        if val is None:
            del self.page
            return
        val = self._stone_page_validator.validate(val)
        self._stone_page_value = val
        self._stone_page_present = True

    @page.deleter
    def page(self):
        self._stone_page_value = None
        self._stone_page_present = False

    @property
    def perPage(self):
        """
        The limit of number of sub accounts that are retrieved in one request.

        :rtype: long
        """
        if self._stone_perPage_present:
            return self._stone_perPage_value
        else:
            return None

    @perPage.setter
    def perPage(self, val):
        if val is None:
            del self.perPage
            return
        val = self._stone_perPage_validator.validate(val)
        self._stone_perPage_value = val
        self._stone_perPage_present = True

    @perPage.deleter
    def perPage(self):
        self._stone_perPage_value = None
        self._stone_perPage_present = False

    def __repr__(self):
        return 'ListSubAccountArg(page={!r}, perPage={!r})'.format(
            self._stone_page_value,
            self._stone_perPage_value,
        )

ListSubAccountArg_validator = bv.Struct(ListSubAccountArg)

class ListSubAccountResult(object):
    """
    :ivar subAccounts: List of SubAccounts objects created by the business
        account.
    """

    __slots__ = [
        '_stone_subAccounts_value',
        '_stone_subAccounts_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 subAccounts=None):
        self._stone_subAccounts_value = None
        self._stone_subAccounts_present = False
        if subAccounts is not None:
            self.subAccounts = subAccounts

    @property
    def subAccounts(self):
        """
        List of SubAccounts objects created by the business account.

        :rtype: list of [SubAccount]
        """
        if self._stone_subAccounts_present:
            return self._stone_subAccounts_value
        else:
            raise AttributeError("missing required field 'subAccounts'")

    @subAccounts.setter
    def subAccounts(self, val):
        val = self._stone_subAccounts_validator.validate(val)
        self._stone_subAccounts_value = val
        self._stone_subAccounts_present = True

    @subAccounts.deleter
    def subAccounts(self):
        self._stone_subAccounts_value = None
        self._stone_subAccounts_present = False

    def __repr__(self):
        return 'ListSubAccountResult(subAccounts={!r})'.format(
            self._stone_subAccounts_value,
        )

ListSubAccountResult_validator = bv.Struct(ListSubAccountResult)

class SubAccount(object):
    """
    Delivery details.

    :ivar _id: ID of the sub account.
    :ivar name: Sub account's business name.
    :ivar phone: Sub account's business phone.
    :ivar address: Sub account's business address.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
        '_stone_name_value',
        '_stone_name_present',
        '_stone_phone_value',
        '_stone_phone_present',
        '_stone_address_value',
        '_stone_address_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 name=None,
                 phone=None,
                 address=None):
        self._stone__id_value = None
        self._stone__id_present = False
        self._stone_name_value = None
        self._stone_name_present = False
        self._stone_phone_value = None
        self._stone_phone_present = False
        self._stone_address_value = None
        self._stone_address_present = False
        if _id is not None:
            self._id = _id
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address

    @property
    def _id(self):
        """
        ID of the sub account.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    @property
    def name(self):
        """
        Sub account's business name.

        :rtype: str
        """
        if self._stone_name_present:
            return self._stone_name_value
        else:
            raise AttributeError("missing required field 'name'")

    @name.setter
    def name(self, val):
        val = self._stone_name_validator.validate(val)
        self._stone_name_value = val
        self._stone_name_present = True

    @name.deleter
    def name(self):
        self._stone_name_value = None
        self._stone_name_present = False

    @property
    def phone(self):
        """
        Sub account's business phone.

        :rtype: str
        """
        if self._stone_phone_present:
            return self._stone_phone_value
        else:
            raise AttributeError("missing required field 'phone'")

    @phone.setter
    def phone(self, val):
        val = self._stone_phone_validator.validate(val)
        self._stone_phone_value = val
        self._stone_phone_present = True

    @phone.deleter
    def phone(self):
        self._stone_phone_value = None
        self._stone_phone_present = False

    @property
    def address(self):
        """
        Sub account's business address.

        :rtype: common.ResultAddress_validator
        """
        if self._stone_address_present:
            return self._stone_address_value
        else:
            raise AttributeError("missing required field 'address'")

    @address.setter
    def address(self, val):
        self._stone_address_validator.validate_type_only(val)
        self._stone_address_value = val
        self._stone_address_present = True

    @address.deleter
    def address(self):
        self._stone_address_value = None
        self._stone_address_present = False

    def __repr__(self):
        return 'SubAccount(_id={!r}, name={!r}, phone={!r}, address={!r})'.format(
            self._stone__id_value,
            self._stone_name_value,
            self._stone_phone_value,
            self._stone_address_value,
        )

SubAccount_validator = bv.Struct(SubAccount)

class UpdateSubAccountArg(object):
    """
    :ivar _id: ID of the sub account to update.
    :ivar name: Sub account's business name.
    :ivar phone: Sub account's business phone.
    :ivar address: Sub account's business address.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
        '_stone_name_value',
        '_stone_name_present',
        '_stone_phone_value',
        '_stone_phone_present',
        '_stone_address_value',
        '_stone_address_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 name=None,
                 phone=None,
                 address=None):
        self._stone__id_value = None
        self._stone__id_present = False
        self._stone_name_value = None
        self._stone_name_present = False
        self._stone_phone_value = None
        self._stone_phone_present = False
        self._stone_address_value = None
        self._stone_address_present = False
        if _id is not None:
            self._id = _id
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address

    @property
    def _id(self):
        """
        ID of the sub account to update.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    @property
    def name(self):
        """
        Sub account's business name.

        :rtype: str
        """
        if self._stone_name_present:
            return self._stone_name_value
        else:
            return None

    @name.setter
    def name(self, val):
        if val is None:
            del self.name
            return
        val = self._stone_name_validator.validate(val)
        self._stone_name_value = val
        self._stone_name_present = True

    @name.deleter
    def name(self):
        self._stone_name_value = None
        self._stone_name_present = False

    @property
    def phone(self):
        """
        Sub account's business phone.

        :rtype: str
        """
        if self._stone_phone_present:
            return self._stone_phone_value
        else:
            return None

    @phone.setter
    def phone(self, val):
        if val is None:
            del self.phone
            return
        val = self._stone_phone_validator.validate(val)
        self._stone_phone_value = val
        self._stone_phone_present = True

    @phone.deleter
    def phone(self):
        self._stone_phone_value = None
        self._stone_phone_present = False

    @property
    def address(self):
        """
        Sub account's business address.

        :rtype: common.Address_validator
        """
        if self._stone_address_present:
            return self._stone_address_value
        else:
            return None

    @address.setter
    def address(self, val):
        if val is None:
            del self.address
            return
        self._stone_address_validator.validate_type_only(val)
        self._stone_address_value = val
        self._stone_address_present = True

    @address.deleter
    def address(self):
        self._stone_address_value = None
        self._stone_address_present = False

    def __repr__(self):
        return 'UpdateSubAccountArg(_id={!r}, name={!r}, phone={!r}, address={!r})'.format(
            self._stone__id_value,
            self._stone_name_value,
            self._stone_phone_value,
            self._stone_address_value,
        )

UpdateSubAccountArg_validator = bv.Struct(UpdateSubAccountArg)

class UpdateSubAccountResult(object):
    """
    :ivar _id: ID of the updated sub account.
    :ivar message: Success message.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
        '_stone_message_value',
        '_stone_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 message=None):
        self._stone__id_value = None
        self._stone__id_present = False
        self._stone_message_value = None
        self._stone_message_present = False
        if _id is not None:
            self._id = _id
        if message is not None:
            self.message = message

    @property
    def _id(self):
        """
        ID of the updated sub account.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    @property
    def message(self):
        """
        Success message.

        :rtype: str
        """
        if self._stone_message_present:
            return self._stone_message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._stone_message_validator.validate(val)
        self._stone_message_value = val
        self._stone_message_present = True

    @message.deleter
    def message(self):
        self._stone_message_value = None
        self._stone_message_present = False

    def __repr__(self):
        return 'UpdateSubAccountResult(_id={!r}, message={!r})'.format(
            self._stone__id_value,
            self._stone_message_value,
        )

UpdateSubAccountResult_validator = bv.Struct(UpdateSubAccountResult)

CreateSubAccountArg._stone_name_validator = bv.String()
CreateSubAccountArg._stone_phone_validator = bv.String()
CreateSubAccountArg._stone_address_validator = common.Address_validator
CreateSubAccountArg._all_field_names_ = set([
    'name',
    'phone',
    'address',
])
CreateSubAccountArg._all_fields_ = [
    ('name', CreateSubAccountArg._stone_name_validator),
    ('phone', CreateSubAccountArg._stone_phone_validator),
    ('address', CreateSubAccountArg._stone_address_validator),
]

CreateSubAccountResult._stone__id_validator = bv.String()
CreateSubAccountResult._stone_message_validator = bv.String()
CreateSubAccountResult._all_field_names_ = set([
    '_id',
    'message',
])
CreateSubAccountResult._all_fields_ = [
    ('_id', CreateSubAccountResult._stone__id_validator),
    ('message', CreateSubAccountResult._stone_message_validator),
]

DeleteSubAccountArg._stone__id_validator = bv.String()
DeleteSubAccountArg._all_field_names_ = set(['_id'])
DeleteSubAccountArg._all_fields_ = [('_id', DeleteSubAccountArg._stone__id_validator)]

DeleteSubAccountResult._stone__id_validator = bv.String()
DeleteSubAccountResult._stone_message_validator = bv.String()
DeleteSubAccountResult._all_field_names_ = set([
    '_id',
    'message',
])
DeleteSubAccountResult._all_fields_ = [
    ('_id', DeleteSubAccountResult._stone__id_validator),
    ('message', DeleteSubAccountResult._stone_message_validator),
]

GetSubAccountArg._stone__id_validator = bv.String()
GetSubAccountArg._all_field_names_ = set(['_id'])
GetSubAccountArg._all_fields_ = [('_id', GetSubAccountArg._stone__id_validator)]

GetSubAccountResult._stone_subAccount_validator = SubAccount_validator
GetSubAccountResult._all_field_names_ = set(['subAccount'])
GetSubAccountResult._all_fields_ = [('subAccount', GetSubAccountResult._stone_subAccount_validator)]

ListSubAccountArg._stone_page_validator = bv.Nullable(bv.Int32())
ListSubAccountArg._stone_perPage_validator = bv.Nullable(bv.Int32())
ListSubAccountArg._all_field_names_ = set([
    'page',
    'perPage',
])
ListSubAccountArg._all_fields_ = [
    ('page', ListSubAccountArg._stone_page_validator),
    ('perPage', ListSubAccountArg._stone_perPage_validator),
]

ListSubAccountResult._stone_subAccounts_validator = bv.List(SubAccount_validator)
ListSubAccountResult._all_field_names_ = set(['subAccounts'])
ListSubAccountResult._all_fields_ = [('subAccounts', ListSubAccountResult._stone_subAccounts_validator)]

SubAccount._stone__id_validator = bv.String()
SubAccount._stone_name_validator = bv.String()
SubAccount._stone_phone_validator = bv.String()
SubAccount._stone_address_validator = common.ResultAddress_validator
SubAccount._all_field_names_ = set([
    '_id',
    'name',
    'phone',
    'address',
])
SubAccount._all_fields_ = [
    ('_id', SubAccount._stone__id_validator),
    ('name', SubAccount._stone_name_validator),
    ('phone', SubAccount._stone_phone_validator),
    ('address', SubAccount._stone_address_validator),
]

UpdateSubAccountArg._stone__id_validator = bv.String()
UpdateSubAccountArg._stone_name_validator = bv.Nullable(bv.String())
UpdateSubAccountArg._stone_phone_validator = bv.Nullable(bv.String())
UpdateSubAccountArg._stone_address_validator = bv.Nullable(common.Address_validator)
UpdateSubAccountArg._all_field_names_ = set([
    '_id',
    'name',
    'phone',
    'address',
])
UpdateSubAccountArg._all_fields_ = [
    ('_id', UpdateSubAccountArg._stone__id_validator),
    ('name', UpdateSubAccountArg._stone_name_validator),
    ('phone', UpdateSubAccountArg._stone_phone_validator),
    ('address', UpdateSubAccountArg._stone_address_validator),
]

UpdateSubAccountResult._stone__id_validator = bv.String()
UpdateSubAccountResult._stone_message_validator = bv.String()
UpdateSubAccountResult._all_field_names_ = set([
    '_id',
    'message',
])
UpdateSubAccountResult._all_fields_ = [
    ('_id', UpdateSubAccountResult._stone__id_validator),
    ('message', UpdateSubAccountResult._stone_message_validator),
]

create = bb.Route(
    'create',
    False,
    CreateSubAccountArg_validator,
    CreateSubAccountResult_validator,
    common.RequestError_validator,
    {'url_param': None,
     'query_params': None,
     'has_body': True},
)
delete = bb.Route(
    'delete',
    False,
    DeleteSubAccountArg_validator,
    DeleteSubAccountResult_validator,
    common.RequestError_validator,
    {'url_param': '_id',
     'query_params': None,
     'has_body': False},
)
get = bb.Route(
    'get',
    False,
    GetSubAccountArg_validator,
    GetSubAccountResult_validator,
    common.RequestError_validator,
    {'url_param': '_id',
     'query_params': None,
     'has_body': False},
)
list = bb.Route(
    'list',
    False,
    ListSubAccountArg_validator,
    ListSubAccountResult_validator,
    common.RequestError_validator,
    {'url_param': None,
     'query_params': 'page, perPage',
     'has_body': False},
)
update = bb.Route(
    'update',
    False,
    UpdateSubAccountArg_validator,
    UpdateSubAccountResult_validator,
    common.RequestError_validator,
    {'url_param': '_id',
     'query_params': None,
     'has_body': True},
)

ROUTES = {
    'create': create,
    'delete': delete,
    'get': get,
    'list': list,
    'update': update,
}

