# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file
"""
This namespace contains the endpoints and data types for working with sub accounts.
"""

try:
    from . import stone_validators as bv
    from . import stone_base as bb
except (ImportError, SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import stone_validators as bv
    import stone_base as bb

try:
    from . import (
        common,
    )
except (ImportError, SystemError, ValueError):
    import common

class CreateSubAccountArg(object):
    """
    :ivar name: Sub account's business name.
    :ivar phone: Sub account's business phone.
    :ivar address: Sub account's business address.
    """

    __slots__ = [
        '_stone_name_value',
        '_stone_name_present',
        '_stone_phone_value',
        '_stone_phone_present',
        '_stone_address_value',
        '_stone_address_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 name=None,
                 phone=None,
                 address=None):
        self._stone_name_value = None
        self._stone_name_present = False
        self._stone_phone_value = None
        self._stone_phone_present = False
        self._stone_address_value = None
        self._stone_address_present = False
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address

    @property
    def name(self):
        """
        Sub account's business name.

        :rtype: str
        """
        if self._stone_name_present:
            return self._stone_name_value
        else:
            raise AttributeError("missing required field 'name'")

    @name.setter
    def name(self, val):
        val = self._stone_name_validator.validate(val)
        self._stone_name_value = val
        self._stone_name_present = True

    @name.deleter
    def name(self):
        self._stone_name_value = None
        self._stone_name_present = False

    @property
    def phone(self):
        """
        Sub account's business phone.

        :rtype: str
        """
        if self._stone_phone_present:
            return self._stone_phone_value
        else:
            raise AttributeError("missing required field 'phone'")

    @phone.setter
    def phone(self, val):
        val = self._stone_phone_validator.validate(val)
        self._stone_phone_value = val
        self._stone_phone_present = True

    @phone.deleter
    def phone(self):
        self._stone_phone_value = None
        self._stone_phone_present = False

    @property
    def address(self):
        """
        Sub account's business address.

        :rtype: common.Address_validator
        """
        if self._stone_address_present:
            return self._stone_address_value
        else:
            raise AttributeError("missing required field 'address'")

    @address.setter
    def address(self, val):
        self._stone_address_validator.validate_type_only(val)
        self._stone_address_value = val
        self._stone_address_present = True

    @address.deleter
    def address(self):
        self._stone_address_value = None
        self._stone_address_present = False

    def __repr__(self):
        return 'CreateSubAccountArg(name={!r}, phone={!r}, address={!r})'.format(
            self._stone_name_value,
            self._stone_phone_value,
            self._stone_address_value,
        )

CreateSubAccountArg_validator = bv.Struct(CreateSubAccountArg)

class CreateSubAccountResult(object):
    """
    :ivar _id: ID of the created sub account.
    :ivar message: Success message.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
        '_stone_message_value',
        '_stone_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None,
                 message=None):
        self._stone__id_value = None
        self._stone__id_present = False
        self._stone_message_value = None
        self._stone_message_present = False
        if _id is not None:
            self._id = _id
        if message is not None:
            self.message = message

    @property
    def _id(self):
        """
        ID of the created sub account.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    @property
    def message(self):
        """
        Success message.

        :rtype: str
        """
        if self._stone_message_present:
            return self._stone_message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._stone_message_validator.validate(val)
        self._stone_message_value = val
        self._stone_message_present = True

    @message.deleter
    def message(self):
        self._stone_message_value = None
        self._stone_message_present = False

    def __repr__(self):
        return 'CreateSubAccountResult(_id={!r}, message={!r})'.format(
            self._stone__id_value,
            self._stone_message_value,
        )

CreateSubAccountResult_validator = bv.Struct(CreateSubAccountResult)

CreateSubAccountArg._stone_name_validator = bv.String()
CreateSubAccountArg._stone_phone_validator = bv.String()
CreateSubAccountArg._stone_address_validator = common.Address_validator
CreateSubAccountArg._all_field_names_ = set([
    'name',
    'phone',
    'address',
])
CreateSubAccountArg._all_fields_ = [
    ('name', CreateSubAccountArg._stone_name_validator),
    ('phone', CreateSubAccountArg._stone_phone_validator),
    ('address', CreateSubAccountArg._stone_address_validator),
]

CreateSubAccountResult._stone__id_validator = bv.String()
CreateSubAccountResult._stone_message_validator = bv.String()
CreateSubAccountResult._all_field_names_ = set([
    '_id',
    'message',
])
CreateSubAccountResult._all_fields_ = [
    ('_id', CreateSubAccountResult._stone__id_validator),
    ('message', CreateSubAccountResult._stone_message_validator),
]

create = bb.Route(
    'create',
    False,
    CreateSubAccountArg_validator,
    CreateSubAccountResult_validator,
    common.RequestError_validator,
    {'url_param': None,
     'query_params': None,
     'has_body': True},
)

ROUTES = {
    'create': create,
}

