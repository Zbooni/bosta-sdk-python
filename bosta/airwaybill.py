# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file
"""
This namespace contains the endpoints and data types for working with air waybills.
"""

try:
    from . import stone_validators as bv
    from . import stone_base as bb
except (ImportError, SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import stone_validators as bv
    import stone_base as bb

try:
    from . import (
        common,
    )
except (ImportError, SystemError, ValueError):
    import common

class GetAirWaybillArg(object):
    """
    :ivar _id: ID of the requested delivery.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None):
        self._stone__id_value = None
        self._stone__id_present = False
        if _id is not None:
            self._id = _id

    @property
    def _id(self):
        """
        ID of the requested delivery.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    def __repr__(self):
        return 'GetAirWaybillArg(_id={!r})'.format(
            self._stone__id_value,
        )

GetAirWaybillArg_validator = bv.Struct(GetAirWaybillArg)

class GetAirWaybillResult(object):
    """
    :ivar data: Base64 encoded string that represents the air waybill in PDF
        format.
    """

    __slots__ = [
        '_stone_data_value',
        '_stone_data_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 data=None):
        self._stone_data_value = None
        self._stone_data_present = False
        if data is not None:
            self.data = data

    @property
    def data(self):
        """
        Base64 encoded string that represents the air waybill in PDF format.

        :rtype: str
        """
        if self._stone_data_present:
            return self._stone_data_value
        else:
            raise AttributeError("missing required field 'data'")

    @data.setter
    def data(self, val):
        val = self._stone_data_validator.validate(val)
        self._stone_data_value = val
        self._stone_data_present = True

    @data.deleter
    def data(self):
        self._stone_data_value = None
        self._stone_data_present = False

    def __repr__(self):
        return 'GetAirWaybillResult(data={!r})'.format(
            self._stone_data_value,
        )

GetAirWaybillResult_validator = bv.Struct(GetAirWaybillResult)

GetAirWaybillArg._stone__id_validator = bv.String()
GetAirWaybillArg._all_field_names_ = set(['_id'])
GetAirWaybillArg._all_fields_ = [('_id', GetAirWaybillArg._stone__id_validator)]

GetAirWaybillResult._stone_data_validator = bv.String()
GetAirWaybillResult._all_field_names_ = set(['data'])
GetAirWaybillResult._all_fields_ = [('data', GetAirWaybillResult._stone_data_validator)]

get = bb.Route(
    'get',
    False,
    GetAirWaybillArg_validator,
    GetAirWaybillResult_validator,
    common.RequestError_validator,
    {'url_param': '_id',
     'query_params': None,
     'has_body': False},
)

ROUTES = {
    'get': get,
}

