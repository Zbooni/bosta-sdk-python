# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file
"""
This namespace contains the endpoints and data types for working with air waybills.
"""

try:
    from . import stone_validators as bv
    from . import stone_base as bb
except (ImportError, SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import stone_validators as bv
    import stone_base as bb

class Error(object):
    """
    Error object returned by the API.

    :ivar code: Error code.
    :ivar message: Error message.
    """

    __slots__ = [
        '_stone_code_value',
        '_stone_code_present',
        '_stone_message_value',
        '_stone_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 code=None,
                 message=None):
        self._stone_code_value = None
        self._stone_code_present = False
        self._stone_message_value = None
        self._stone_message_present = False
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message

    @property
    def code(self):
        """
        Error code.

        :rtype: long
        """
        if self._stone_code_present:
            return self._stone_code_value
        else:
            raise AttributeError("missing required field 'code'")

    @code.setter
    def code(self, val):
        val = self._stone_code_validator.validate(val)
        self._stone_code_value = val
        self._stone_code_present = True

    @code.deleter
    def code(self):
        self._stone_code_value = None
        self._stone_code_present = False

    @property
    def message(self):
        """
        Error message.

        :rtype: str
        """
        if self._stone_message_present:
            return self._stone_message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._stone_message_validator.validate(val)
        self._stone_message_value = val
        self._stone_message_present = True

    @message.deleter
    def message(self):
        self._stone_message_value = None
        self._stone_message_present = False

    def __repr__(self):
        return 'Error(code={!r}, message={!r})'.format(
            self._stone_code_value,
            self._stone_message_value,
        )

Error_validator = bv.Struct(Error)

class GetAirWaybillArg(object):
    """
    :ivar _id: ID of the requested delivery.
    """

    __slots__ = [
        '_stone__id_value',
        '_stone__id_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 _id=None):
        self._stone__id_value = None
        self._stone__id_present = False
        if _id is not None:
            self._id = _id

    @property
    def _id(self):
        """
        ID of the requested delivery.

        :rtype: str
        """
        if self._stone__id_present:
            return self._stone__id_value
        else:
            raise AttributeError("missing required field '_id'")

    @_id.setter
    def _id(self, val):
        val = self._stone__id_validator.validate(val)
        self._stone__id_value = val
        self._stone__id_present = True

    @_id.deleter
    def _id(self):
        self._stone__id_value = None
        self._stone__id_present = False

    def __repr__(self):
        return 'GetAirWaybillArg(_id={!r})'.format(
            self._stone__id_value,
        )

GetAirWaybillArg_validator = bv.Struct(GetAirWaybillArg)

class GetAirWaybillResult(object):
    """
    :ivar data: Base64 encoded string that represents the air waybill in PDF
        format.
    """

    __slots__ = [
        '_stone_data_value',
        '_stone_data_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 data=None):
        self._stone_data_value = None
        self._stone_data_present = False
        if data is not None:
            self.data = data

    @property
    def data(self):
        """
        Base64 encoded string that represents the air waybill in PDF format.

        :rtype: str
        """
        if self._stone_data_present:
            return self._stone_data_value
        else:
            raise AttributeError("missing required field 'data'")

    @data.setter
    def data(self, val):
        val = self._stone_data_validator.validate(val)
        self._stone_data_value = val
        self._stone_data_present = True

    @data.deleter
    def data(self):
        self._stone_data_value = None
        self._stone_data_present = False

    def __repr__(self):
        return 'GetAirWaybillResult(data={!r})'.format(
            self._stone_data_value,
        )

GetAirWaybillResult_validator = bv.Struct(GetAirWaybillResult)

class RequestError(object):
    """
    :ivar errors: List of errors.
    """

    __slots__ = [
        '_stone_errors_value',
        '_stone_errors_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 errors=None):
        self._stone_errors_value = None
        self._stone_errors_present = False
        if errors is not None:
            self.errors = errors

    @property
    def errors(self):
        """
        List of errors.

        :rtype: list of [Error]
        """
        if self._stone_errors_present:
            return self._stone_errors_value
        else:
            raise AttributeError("missing required field 'errors'")

    @errors.setter
    def errors(self, val):
        val = self._stone_errors_validator.validate(val)
        self._stone_errors_value = val
        self._stone_errors_present = True

    @errors.deleter
    def errors(self):
        self._stone_errors_value = None
        self._stone_errors_present = False

    def __repr__(self):
        return 'RequestError(errors={!r})'.format(
            self._stone_errors_value,
        )

RequestError_validator = bv.Struct(RequestError)

Error._stone_code_validator = bv.Int32()
Error._stone_message_validator = bv.String()
Error._all_field_names_ = set([
    'code',
    'message',
])
Error._all_fields_ = [
    ('code', Error._stone_code_validator),
    ('message', Error._stone_message_validator),
]

GetAirWaybillArg._stone__id_validator = bv.String()
GetAirWaybillArg._all_field_names_ = set(['_id'])
GetAirWaybillArg._all_fields_ = [('_id', GetAirWaybillArg._stone__id_validator)]

GetAirWaybillResult._stone_data_validator = bv.String()
GetAirWaybillResult._all_field_names_ = set(['data'])
GetAirWaybillResult._all_fields_ = [('data', GetAirWaybillResult._stone_data_validator)]

RequestError._stone_errors_validator = bv.List(Error_validator)
RequestError._all_field_names_ = set(['errors'])
RequestError._all_fields_ = [('errors', RequestError._stone_errors_validator)]

get = bb.Route(
    'get',
    False,
    GetAirWaybillArg_validator,
    GetAirWaybillResult_validator,
    RequestError_validator,
    {'url_param': '_id',
     'query_params': None,
     'has_body': False},
)

ROUTES = {
    'get': get,
}

