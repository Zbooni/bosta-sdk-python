# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file
try:
    from . import stone_validators as bv
    from . import stone_base as bb
except (ImportError, SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import stone_validators as bv
    import stone_base as bb

class Error(object):
    """
    Error object returned by the API.

    :ivar code: Error code.
    :ivar message: Error message.
    """

    __slots__ = [
        '_stone_code_value',
        '_stone_code_present',
        '_stone_message_value',
        '_stone_message_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 code=None,
                 message=None):
        self._stone_code_value = None
        self._stone_code_present = False
        self._stone_message_value = None
        self._stone_message_present = False
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message

    @property
    def code(self):
        """
        Error code.

        :rtype: long
        """
        if self._stone_code_present:
            return self._stone_code_value
        else:
            raise AttributeError("missing required field 'code'")

    @code.setter
    def code(self, val):
        val = self._stone_code_validator.validate(val)
        self._stone_code_value = val
        self._stone_code_present = True

    @code.deleter
    def code(self):
        self._stone_code_value = None
        self._stone_code_present = False

    @property
    def message(self):
        """
        Error message.

        :rtype: str
        """
        if self._stone_message_present:
            return self._stone_message_value
        else:
            raise AttributeError("missing required field 'message'")

    @message.setter
    def message(self, val):
        val = self._stone_message_validator.validate(val)
        self._stone_message_value = val
        self._stone_message_present = True

    @message.deleter
    def message(self):
        self._stone_message_value = None
        self._stone_message_present = False

    def __repr__(self):
        return 'Error(code={!r}, message={!r})'.format(
            self._stone_code_value,
            self._stone_message_value,
        )

Error_validator = bv.Struct(Error)

class RequestError(object):
    """
    :ivar errors: List of errors.
    """

    __slots__ = [
        '_stone_errors_value',
        '_stone_errors_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 errors=None):
        self._stone_errors_value = None
        self._stone_errors_present = False
        if errors is not None:
            self.errors = errors

    @property
    def errors(self):
        """
        List of errors.

        :rtype: list of [Error]
        """
        if self._stone_errors_present:
            return self._stone_errors_value
        else:
            raise AttributeError("missing required field 'errors'")

    @errors.setter
    def errors(self, val):
        val = self._stone_errors_validator.validate(val)
        self._stone_errors_value = val
        self._stone_errors_present = True

    @errors.deleter
    def errors(self):
        self._stone_errors_value = None
        self._stone_errors_present = False

    def __repr__(self):
        return 'RequestError(errors={!r})'.format(
            self._stone_errors_value,
        )

RequestError_validator = bv.Struct(RequestError)

Error._stone_code_validator = bv.Int32()
Error._stone_message_validator = bv.String()
Error._all_field_names_ = set([
    'code',
    'message',
])
Error._all_fields_ = [
    ('code', Error._stone_code_validator),
    ('message', Error._stone_message_validator),
]

RequestError._stone_errors_validator = bv.List(Error_validator)
RequestError._all_field_names_ = set(['errors'])
RequestError._all_fields_ = [('errors', RequestError._stone_errors_validator)]

ROUTES = {
}

